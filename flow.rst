================
Encryption Flows
================


The Key Service is a Firefox Account Content **Provider** like
the `Profile Server <https://github.com/mozilla/fxa-profile-server/blob/master/docs/API.md>`_.

The Key Service can be used by third party applications to store
and retrieve public encryption keys on behalf of their
FxA-connected users.

The main use case is to facilitate end-to-end encryption between
FxA users with minimal overhead and maximal privacy protection.

This document describes possible encryption flows enabled by FxA & the
Key Service.


Generating Application Keys
===========================


.. image:: https://raw.githubusercontent.com/tarekziade/fxakeys/master/fxakeys-keyflow.jpg


When an application uses the Oauth2 flow to authenticate a user, it gets
from the Firefox Account authentication server a number of information about
the user in the context of the application:

- **client_id**: the Oauth2 unique identifier for the client application
- **kB**: the class-B master key for the account (**this is not yet the case**)

Using these two fields, a **kBr** value can be derived, using HKDF. This
new key is specific to the application and can be easily found by any
device connecting to the application under a given user account.

The next step is to randomly generate a public/private key pair for the
application. This keypair is attached to the user and the application
and published to the Key Server.

Before the key pair is published, the private key is encrypted using
**kBr** as a symmetric key. Since this key can be computed again once
connected to the FxA account, the published encrypted private key
can be decrypted by its owner on any FxA connected device.

Publishing the key pair offers two advantages:

- **Device Syncing** the ability to retrieve the full key pair
  from any device attached to the given FxA account.
- **Discoverability** the ability to search & retrieve application users public keys.


Using Application Keys
======================


XXX


Use case 1: sharing a password
==============================

XXX

Use case 2: sharing files
=========================

Let's imagine a second FxA content provider: a Cloud Storage API where FxA can
read and write files.

The diagram below shows the general principle on how an application can leverage the
Key Server & a Cloud Storage Server to offer a sharing feature with no server-side
custom development neeeded.

.. image:: https://raw.githubusercontent.com/tarekziade/fxakeys/master/fxakeys.jpg



The flow is the following:

- A user connects to their FxA account with Application through an OAuth2 flow.
- Application gets through this flow an authorization token it can trade for a bearer token
- The token can be used to connect to the Storage service and to the Key service
- The FxA auth can also be used to generate a key pair for the application
- The public key generated by the application is published into the Key service
- The application can use the Key service to discover other users keys and encrypt data


Encryptions strategies
======================

XXX

one-to-one encryption
---------------------

XXX

one-to-many encryption
----------------------

XXX


